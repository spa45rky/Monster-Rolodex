{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchBox/searchbox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0TAGaA,EAAO,SAAAC,GAAK,OACrB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAK,GAA7C,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,4BAAIN,EAAMI,QAAQG,YCHbC,G,MAAW,SAAAR,GAAK,OACxB,qBAAKC,UAAU,YAAf,SACID,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCJdM,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAErB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCuCHG,E,kDA1CX,aAAe,IAAD,8BACV,gBAcJH,aAAe,SAACI,GACZ,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAbrC,EAAKC,MAAQ,CACTb,SAAU,GACVU,YAAa,IALP,E,qDASd,WAAqB,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,oBAOhD,WAAU,IAAD,EAC2BC,KAAKN,MAA9Bb,EADF,EACEA,SAAUU,EADZ,EACYA,YAEVU,EAAoBpB,EAASqB,QAAQ,SAAA1B,GAAO,OAC/CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAIpD,OAEI,sBAAK9B,UAAU,MAAf,UACI,kDACA,cAAC,EAAD,CACAW,YAAY,kBACZC,aAAce,KAAKf,eAEnB,cAAC,EAAD,CAAUJ,SAAUoB,W,GApClBI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAO1BZ,M","file":"static/js/main.d8bec50d.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img alt='monster' src={`https://robohash.org/${props.monster.id + 10}?set=set2&size=180x180`}/>\r\n        <h2> {props.monster.name} </h2>\r\n        <p>{props.monster.email}</p>\r\n    </div>\r\n)","import React from 'react'\r\nimport {Card} from '../card/card.component'\r\nimport './card-list.styles.css'\r\n\r\nexport const CardList = props => (\r\n     <div className='card-list'>\r\n        {props.monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster}/>\r\n    ))}\r\n        </div>\r\n);","import React from 'react';\r\nimport './searchbox.css';\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n\r\n    <input\r\n        className='search'\r\n        type='search'\r\n        placeholder= {placeholder}\r\n        onChange={handleChange}\r\n    />\r\n)\r\n","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from './components/searchBox/searchbox.component'\n\nclass App extends Component{\n    constructor() {\n        super();\n\n        this.state = {\n            monsters: [],\n            searchField: ''\n        };\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => this.setState({monsters: users}));\n    }\n\n    handleChange = (e) => {\n        this.setState({searchField: e.target.value})\n    }\n\n    render() {\n        const {monsters, searchField} = this.state\n\n        const  filteredMonsters  = monsters.filter( monster =>\n            monster.name.toLowerCase().includes(searchField.toLowerCase())\n        )\n\n\n        return(\n\n            <div className='App'>\n                <h1>Monsters Rolodex</h1>\n                <SearchBox\n                placeholder='search monsters'\n                handleChange={this.handleChange}\n                />\n                <CardList monsters={filteredMonsters}/>\n            </div>\n        )\n    }\n}\n\n\nexport default App\n\n\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}